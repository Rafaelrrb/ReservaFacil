// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reserva.Facil.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ReservaFacilContext))]
    partial class ReservaFacilContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Motel.Model.MotelModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Motel");
                });

            modelBuilder.Entity("Reservation.Model.ReservationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMotel")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdSuite")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdMotel");

                    b.HasIndex("IdSuite");

                    b.HasIndex("IdUser");

                    b.HasIndex("UserModelId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Suite.Model.SuiteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMotel")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTypeSuite")
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdMotel");

                    b.HasIndex("IdTypeSuite");

                    b.ToTable("Suites");
                });

            modelBuilder.Entity("SuiteType.Model.SuiteTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SuiteTypes");
                });

            modelBuilder.Entity("User.Model.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Reservation.Model.ReservationModel", b =>
                {
                    b.HasOne("Motel.Model.MotelModel", "Motel")
                        .WithMany()
                        .HasForeignKey("IdMotel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suite.Model.SuiteModel", "Suite")
                        .WithMany()
                        .HasForeignKey("IdSuite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.Model.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.Model.UserModel", null)
                        .WithMany("Reservations")
                        .HasForeignKey("UserModelId");

                    b.Navigation("Motel");

                    b.Navigation("Suite");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Suite.Model.SuiteModel", b =>
                {
                    b.HasOne("Motel.Model.MotelModel", "Motel")
                        .WithMany("Suites")
                        .HasForeignKey("IdMotel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuiteType.Model.SuiteTypeModel", "SuiteType")
                        .WithMany("Suites")
                        .HasForeignKey("IdTypeSuite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("SuiteType");
                });

            modelBuilder.Entity("Motel.Model.MotelModel", b =>
                {
                    b.Navigation("Suites");
                });

            modelBuilder.Entity("SuiteType.Model.SuiteTypeModel", b =>
                {
                    b.Navigation("Suites");
                });

            modelBuilder.Entity("User.Model.UserModel", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
